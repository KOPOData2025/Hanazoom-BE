spring.application.name=HanaZoom

# Active Spring Profile
spring.profiles.active=dev

# Database Configuration (MySQL for Docker Compose)
spring.datasource.url=jdbc:mysql://localhost:3306/hanazoom
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.username=hanazoom_user
spring.datasource.password=hanazoom1234!

# DataSource Properties Binding Configuration (성능 최적화)
spring.datasource.hikari.maximum-pool-size=100
spring.datasource.hikari.minimum-idle=20
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1200000
spring.datasource.hikari.leak-detection-threshold=30000
spring.datasource.hikari.initialization-fail-timeout=30000
spring.datasource.hikari.connection-test-query=SELECT 1
spring.datasource.hikari.validation-timeout=3000
# 추가 성능 설정
spring.datasource.hikari.auto-commit=false
spring.datasource.hikari.connection-init-sql=SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci
spring.datasource.hikari.cache-prep-stmts=true
spring.datasource.hikari.prep-stmt-cache-size=500
spring.datasource.hikari.prep-stmt-cache-sql-limit=2048
spring.datasource.hikari.use-server-prep-stmts=true

# Redis Configuration (성능 최적화)
spring.data.redis.host=localhost
spring.data.redis.port=16380
spring.data.redis.password=redis1234!
spring.data.redis.timeout=3000ms
spring.data.redis.database=0
# Redis 연결 풀 설정 (최적화)
spring.data.redis.lettuce.pool.max-active=50
spring.data.redis.lettuce.pool.max-idle=20
spring.data.redis.lettuce.pool.min-idle=10
spring.data.redis.lettuce.pool.max-wait=1000ms
spring.data.redis.lettuce.pool.time-between-eviction-runs=30000ms
# Redis 재연결 설정
spring.data.redis.lettuce.shutdown-timeout=100ms
# Redis 성능 최적화
spring.data.redis.lettuce.pool.test-on-borrow=true
spring.data.redis.lettuce.pool.test-on-return=false
spring.data.redis.lettuce.pool.test-while-idle=true

# MongoDB Configuration (for chat history)
spring.data.mongodb.host=localhost
spring.data.mongodb.port=27017
spring.data.mongodb.database=hanazoom_chat
spring.data.mongodb.username=hanazoom_mongo
spring.data.mongodb.password=mongo1234!
spring.data.mongodb.authentication-database=hanazoom_chat
# MongoDB URI (대안적 설정 방법 - 위의 개별 설정보다 우선순위가 낮음)
# spring.data.mongodb.uri=mongodb://hanazoom_mongo:mongo1234!@localhost:27017/hanazoom_chat?authSource=admin

# Kakao API Settings
kakao.rest-api-key=${KAKAO_REST_API_KEY:f50a1c0f8638ca30ef8c170a6ff8412b}

# Kakao OAuth Settings
kakao.oauth.client-id=${KAKAO_OAUTH_CLIENT_ID:f50a1c0f8638ca30ef8c170a6ff8412b}
kakao.oauth.client-secret=${KAKAO_OAUTH_CLIENT_SECRET:your_kakao_client_secret}
kakao.oauth.redirect-uri=${KAKAO_OAUTH_REDIRECT_URI:http://localhost:3000/auth/kakao/callback}

# JPA Configuration (성능 최적화)
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
# 배치 처리 최적화
spring.jpa.properties.hibernate.jdbc.batch_size=50
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
# 쿼리 최적화
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true
spring.jpa.properties.hibernate.jdbc.fetch_size=100
spring.jpa.properties.hibernate.jdbc.batch.size=50
# 캐시 최적화
spring.jpa.properties.hibernate.cache.use_second_level_cache=false
spring.jpa.properties.hibernate.cache.use_query_cache=false
# 세션 최적화
spring.jpa.properties.hibernate.connection.provider_disables_autocommit=true
spring.jpa.properties.hibernate.connection.autocommit=false

# Data SQL Configuration
spring.jpa.defer-datasource-initialization=false
spring.sql.init.mode=never
#spring.sql.init.data-locations=classpath:data.sql

# 한국투자증권 API 설정
kis.app-key=${KIS_APP_KEY}
kis.app-secret=${KIS_APP_SECRET}
kis.account-code=${KIS_ACCOUNT_CODE}
kis.product-code=${KIS_PRODUCT_CODE}

# 한국은행 ECOS API Settings (디버깅용)
ecos.api.key=3V6SOQXESD38Y5XWXVDW

# DevTools Configuration
spring.devtools.restart.enabled=true
spring.devtools.livereload.enabled=true

# Logging Configuration
logging.file.name=/var/log/hanazoom/backend.log
logging.level.root=INFO
logging.level.com.hanazoom=INFO
logging.level.sun.rmi=ERROR
logging.level.javax.management=ERROR
logging.level.java.rmi=ERROR
logging.level.com.hanazoom=DEBUG
logging.level.com.hanazoom.domain.stock.service.StockMinutePriceService=WARN
logging.level.com.hanazoom.domain.stock.service.StockPriceService=WARN
logging.level.com.hanazoom.domain.stock.service.StockWebSocketService=WARN
# Kafka 관련 로그 숨기기
logging.level.org.apache.kafka=ERROR
logging.level.org.springframework.kafka=ERROR
logging.level.kafka=ERROR
logging.level.kafka.clients=ERROR
logging.level.kafka.clients.NetworkClient=ERROR
logging.level.kafka.clients.consumer=ERROR
logging.level.kafka.clients.producer=ERROR
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n

# Server Configuration (성능 최적화)
server.port=8080
server.tomcat.threads.max=400
server.tomcat.threads.min-spare=50
server.tomcat.accept-count=200
server.tomcat.connection-timeout=20000
server.tomcat.keep-alive-timeout=20000
server.tomcat.max-connections=10000
server.tomcat.max-http-post-size=2097152

# WebSocket Configuration
spring.websocket.max-text-message-size=8192
spring.websocket.max-binary-message-size=8192
spring.websocket.max-sessions=1000
# JWT Configuration
jwt.secret=hanazoomSecretKey1234567890hanazoomSecretKey1234567890
jwt.access-token-validity=3600000
jwt.refresh-token-validity=604800000

spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.acks=all
spring.kafka.producer.retries=5
spring.kafka.producer.batch-size=65536
spring.kafka.producer.linger.ms=10
spring.kafka.producer.buffer-memory=67108864
spring.kafka.producer.compression.type=lz4
spring.kafka.producer.max-in-flight-requests-per-connection=5

spring.kafka.consumer.group-id=wts-consumer-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.enable-auto-commit=false
spring.kafka.consumer.auto-commit-interval=1000
spring.kafka.consumer.max-poll-records=1000
spring.kafka.consumer.fetch-min-size=1024
spring.kafka.consumer.fetch-max-wait=100ms
spring.kafka.consumer.session-timeout.ms=30000
spring.kafka.consumer.heartbeat-interval.ms=3000
spring.kafka.consumer.max-poll-interval.ms=300000

# Kafka Topics
kafka.topics.stock-realtime=stock-realtime-data
kafka.topics.stock-batch=stock-batch-data
kafka.topics.performance-metrics=performance-metrics

# Kafka 조건부 활성화 (true로 설정하면 Kafka 관련 Bean들이 생성됨)
kafka.enabled=true

# Kafka 연결 설정 (WebSocket과 독립적으로 동작)
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.admin.properties.bootstrap.servers=localhost:9092
spring.kafka.consumer.bootstrap.servers=localhost:9092
spring.kafka.producer.bootstrap.servers=localhost:9092

# Kafka 초기화 실패 시 애플리케이션 시작에 영향 주지 않도록 설정
spring.kafka.admin.fail-fast=false
spring.kafka.consumer.fail-fast=false
spring.kafka.producer.fail-fast=false

# 빠른 연결 실패를 위한 타임아웃 설정 (WebSocket에 영향 주지 않도록)
spring.kafka.admin.operation-timeout=10000
spring.kafka.consumer.session-timeout.ms=10000
spring.kafka.producer.transaction-timeout=10000

# Kafka 재연결 설정
spring.kafka.consumer.enable-auto-commit=true
spring.kafka.consumer.auto-commit-interval=1000
spring.kafka.consumer.max-poll-records=500
# Elasticsearch Configuration (for stock search)
spring.elasticsearch.uris=http://localhost:19200
spring.elasticsearch.connection-timeout=5s
spring.elasticsearch.socket-timeout=60s
